#!/usr/bin/python
# SQANTI filtering: Filtering of Isoforms based on SQANTI attribute
# Authors: Lorena de la Fuente and Cecile Pereira

from collections import defaultdict
import getopt
import sys
import os.path, os
import timeit
import subprocess
import argparse
import psutil
import gc
import distutils.spawn
utilitiesPath =  os.path.dirname(os.path.realpath(__file__))+"/utilities/" 

sys.path.insert(0, utilitiesPath)

def main():

	#arguments
	parser = argparse.ArgumentParser(description="Filtering of Isoforms based on SQANTI attributes")
	parser.add_argument('TP_isoforms', help='\tFile with true positive set of isoforms') # one column file with isoform IDs
	parser.add_argument('TN_isoforms', help='\t\tFile with true negative set of isoforms') # one column file with isoform IDs
	parser.add_argument('sqanti_class', help='\t\tSQANTI classification at isoform level')
	parser.add_argument('-i','--isoforms', dest="fasta", help='\t\tFasta isoform file to be filtered by SQANTI filtering', required=False)
	parser.add_argument('-d','--dir', dest="dir",help='\t\tOutput directory name. Default: "Classifier_out" directory where the script was run.', required=False)
	parser.add_argument("-v", "--version", help="Display program version number.", action='version', version='SQANTI 1.0')

	args = parser.parse_args()
	
	args.sqanti_class = os.path.abspath(args.sqanti_class)
	if not os.path.isfile(args.sqanti_class):
		sys.stderr.write("ERROR: '%s' doesn't exist\n" %(args.sqanti_class))
		sys.exit()

	args.TP_isoforms = os.path.abspath(args.TP_isoforms)
	if not os.path.isfile(args.TP_isoforms):
		sys.stderr.write("ERROR: '%s' doesn't exist\n" %(args.TP_isoforms))
		sys.exit()

	args.TN_isoforms = os.path.abspath(args.TN_isoforms)
	if not os.path.isfile(args.TN_isoforms):
		sys.stderr.write("ERROR: '%s' doesn't exist\n" %(args.TN_isoforms))
		sys.exit()

	if args.fasta!=None:
		args.fasta = os.path.abspath(args.fasta)
		if not os.path.isfile(args.fasta):
			sys.stderr.write("ERROR: '%s' doesn't exist\n" %(args.fasta))
			sys.exit()

	if args.dir==None:
		args.dir = os.getcwd() + "/Classifier_out"
		if not os.path.exists(args.dir):
			os.makedirs(args.dir)
	else:
		args.dir = os.path.abspath(args.dir)
		if not os.path.exists(args.dir):
			#if os.path.exists(os.path.dirname(os.path.dirname(args.dir))):
			os.makedirs(args.dir)
			# else:
			# 	sys.stderr.write("ERROR: '%s' directory doesn't exist\n" %(os.path.dirname(os.path.dirname(args.dir))))
			# 	sys.exit()

	# Running functionality
	sys.stdout.write("\nRunning SQANTI filtering...\n")
	run(args)	

def fasta_parser(fastaFile):

	try:
		fasta = open(fastaFile, "r")
	except IOError:
		sys.stderr.write('ERROR: Unable to read %s file\n' % fastaFile)
		raise SystemExit(1)
	try:
		seqDicc = {}
		index = 0
		for line in fasta:
			if line.startswith(">"):
				if index > 0:
					seqDicc[name] = seq
				index+=1
				name = line[1:].rstrip()
				#name = line[1:].split()[0].rstrip()
				seq = ''
			elif line.strip()!="":
				seq += line.rstrip()
		seqDicc[name] = seq

		fasta.close()

	except IOError:
		sys.stderr.write('File %s without fasta format' % fastaFile)
		raise SystemExit(1)

	return(seqDicc)

def run(args):

	## Generating classifier

	sys.stdout.write("\nGenerating isoform classifier...\n")

	rscriptPath = distutils.spawn.find_executable('Rscript')

	subprocess.call ([rscriptPath, utilitiesPath+"/Classifier_fromSqanti_V4.R", "-c", args.sqanti_class, "-p", args.TP_isoforms, "-n", args.TN_isoforms, "-o", args.dir])

	if args.fasta: # if user provides the fasta file

	 	#read list of isoforms classified as true
		filtIso_File = args.dir+"/curated_transcriptome.txt" #generated by Cecile
		filtIso = open(filtIso_File, "r")
		trueIsolist = []
		[trueIsolist.append(line.rstrip()) for line in filtIso]
		filtIso.close()

		# reading fasta
		fastaFile = os.path.abspath(args.fasta)
	 	fastaDicc = fasta_parser(fastaFile)

	 	#reading and filtering fasta file
		fastaFiltFile = args.dir+"/"+os.path.splitext(os.path.basename(args.fasta))[0]+"_curated.fasta"
	 	fastaFilt = open(fastaFiltFile, "w")

	 	for ID in fastaDicc:
	 	 	if len(ID.split("|"))>4: # Refseq fasta header
	 	 		ID_mod = ID.split("|")[3]
	 	 	elif len(ID.split("|"))==3: # PacBio fasta header
	 	 		ID_mod = ID.split("|")[0]
	 	 	else:
	 	 		ID_mod = ID.split()[0].strip() # Ensembl fasta header and SQANTI corrected fasta header
	 	 	if ID_mod in trueIsolist:
	 	 		fastaFilt.write(">"+ID+"\n"+fastaDicc[ID]+"\n")

	 	fastaFilt.close()
		
		sys.stdout.write("\nSQANTI filtering successfully run!\n")


if __name__ == "__main__":
	main()
